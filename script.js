'use strict';
//Define custom syntax
const $ = document.querySelector.bind(document);
const $$ = document.querySelectorAll.bind(document);
//Get ra c√°c element t·ª´ DOM ƒë·ªÉ sau s·ª≠ d·ª•ng, thay v√¨ m·ªói ch·ªó ph·∫£i g·ªçi l·∫°i document...
const scoreTag = $('.score');
const highscoreTag = $('.highscore');
const messageTag = $('.message');
const hiddenTag = $('.number');
const againButton = $('.again');
const guessTag = $('.guess');
const checkButton = $('.check');
const body = $('body');
//-------------------------------------------------------------------------------------------------------------------------//
//Set attribute ƒë·ªÉ t√°i s·ª≠ d·ª•ng
const maxNumber = 20; //Set gi√° tr·ªã cu·ªëi cho kho·∫£ng
const minNumber = 1; //Set gi√° tr·ªã ƒë·∫ßu cho kho·∫£ng, thay v√¨ hardcode
const maxScore = maxNumber;
const defaultMessage = `Start guessing...`;
const defaultHidden = `?`;
const defaultNumber = ``;
const winnerColor = `#60b347`;
const winnerHiddenTagWidth = `30rem`;
let randomNumber = generateRandomNumber();
let score = maxScore;
let highscore = 0;
let flag = false;
//-------------------------------------------------------------------------------------------------------------------------//
//define ra function trong qu√° tr√¨nh build logic (t√°i s·ª≠ d·ª•ng, tr√°nh l·∫∑p code)
function generateRandomNumber() {
  return Math.trunc(Math.random() * 20) + 1;
}
//Hi·ªÉn th·ªã ra view
function display(element, message) {
  element.textContent = message;
}

//-------------------------------------------------------------------------------------------------------------------------//

//H√†m check input number ng∆∞·ªùi d√πng so v·ªõi s·ªë b√≠ m·∫≠t
const checkNumber = () => {
  const number = Number(guessTag.value); //L·∫•y ra s·ªë ng∆∞·ªùi d√πng nh·∫≠p v√†o

  if (number < minNumber || number > maxNumber)
    //N·∫øu s·ªë n·∫±m ngo√†i kho·∫£ng ƒë√£ cho -> n√©m l·ªói
    display(messageTag, `Wrong number, try again üòí`);
  else {
    if ((number === randomNumber && !flag) || flag) {
      //N·∫øu (s·ªë c·ªßa ng∆∞·ªùi ch∆°i === s·ªë b√≠ m·∫≠t v√† ch∆∞a th·∫Øng l·∫ßn n√†o) || (ƒë√£ th·∫Øng)
      display(messageTag, `üéâüéâ CORRECT NUMBER!. You're so amazing üòé`);
      if (number === randomNumber && !flag) {
        //Ch·ªâ khi m·ªõi th·∫Øng th√¨ m·ªõi x·ª≠ l√Ω d∆∞·ªõi ƒë√¢y
        flag = true;
        display(hiddenTag, String(randomNumber));
        if (score > highscore) {
          //N·∫øu ƒëi·ªÉm hi·ªán t·∫°i c·ªßa ng∆∞·ªùi ch∆°i > ƒëi·ªÉm cao nh·∫•t tr∆∞·ªõc ƒë√≥, set ƒëi·ªÉm hi·ªán t·∫°i ghi v√†o m·ªëc
          highscore = score;
          display(highscoreTag, String(highscore));
        }
        body.style.backgroundColor = winnerColor; //Set m√†u n·ªÅn c·ªßa body khi ng∆∞·ªùi ch∆°i chi·∫øn th·∫Øng
        hiddenTag.style.width = winnerHiddenTagWidth; //Set ƒë·ªô r·ªông c·ªßa √¥ b√≠ m·∫≠t
      }
    } else if (number !== randomNumber && !flag) {
      if (score !== 0) {
        display(
          messageTag,
          number > randomNumber ? `Too high...üëÜ` : `Too low...üëá` //To√°n t·ª≠ 3 ng√¥i cho ng·∫Øn g·ªçn
        );
        display(scoreTag, String(--score));
        if (score === 0) display(messageTag, `YOU LOST THE GAME ü•≤`);
      } else {
        display(messageTag, `Please play again... üò≠`);
      }
    }
  }
};

const reset = () => {
  guessTag.value = defaultNumber; //Ch·ªânh l·∫°i gi√° tr·ªã m·∫∑c ƒë·ªãnh khi ng∆∞·ªùi ch∆°i play again
  display(messageTag, defaultMessage); //Hi·ªÉn th·ªã l·∫°i message m·∫∑c ƒë·ªãnh
  display(scoreTag, String(maxScore)); //Hi·ªÉn th·ªã l·∫°i score m·∫∑c ƒë·ªãnh
  display(hiddenTag, defaultHidden); //Hi·ªÉn th·ªã l·∫°i √¥ b√≠ m·∫≠t m·∫∑c ƒë·ªãnh
  randomNumber = generateRandomNumber(); //Quay ra s·ªë b√≠ m·∫≠t m·ªõi khi play again
  score = Number(scoreTag.textContent); //L·∫•y ƒëi·ªÉm t·ª´ DOM scoreTag ra ƒë·ªÉ x·ª≠ l√Ω trong code
  flag = false; //Set l·∫°i c·ªù
  body.style.removeProperty(`background-color`); //css property ƒë∆∞·ª£c ƒë·∫∑t trong chu·ªói th√¨ format nh∆∞ bth : background-color
  hiddenTag.style.removeProperty(`width`);
};

//-------------------------------------------------------------------------------------------------------------------------//

function playAgain() {
  againButton.addEventListener('click', reset);
}

function check() {
  checkButton.addEventListener('click', checkNumber);
}

function loadGame() {
  window.onload = function () {
    hiddenTag.value = Math.floor(Math.random() * 19 + 1);
  };
}

//-------------------------------------------------------------------------------------------------------------------------//

function start() {
  loadGame();
  check();
  playAgain();
}

start();
